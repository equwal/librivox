(in-package :librivox)
(defvar *downloads-dir* "/run/media/raw-downloads/")
(defvar *max-seconds* (* 60 60 12))
(defvar *image-types* (list "jpg"))
(defvar *archive-types* (list "m3u"))
(defvar *video-types* (list "mp4"))
(defvar *audio-types* (list "mp3"))
(defvar *text-types* (list "txt"))
(defvar *types* (list *image-types*
                      *archive-types*
                      *video-types*
                      *audio-types*
                      *text-types*))
(defvar *comletion-name* "completion.tmp")
(defun change-dir (dir code)
  (format nil "cd ~A && ~A" dir code))
(defun run-line* (code &optional (output *debug-io*))
  (run-line (change-dir *downloads-dir* code) :output output))
(defun run-line*-integer-output (code)
  (parse-integer (run-program (change-dir *downloads-dir* code)
			      :output :string) :junk-allowed t))
(defun book-down (path)
  (with-open-file (s path)
    (dolines (line s)
      (run-line* (format nil "wget -nc ~A" line)) (print line))))
(defmacro unwind-prog1 (cleanup &body protected)
  `(unwind-protect (progn ,@protected) ,cleanup))
(defun delete-types (&optional more)
  (dolist (y (append *types* more))
    (run-line* (concat "rm *." y))))
(defun safe-exit (old-dir)
  (setf *downloads-dir* old-dir)
  (delete-types))
(defun convert (&key dir image input)
  "Convert the zip to video."
  (let ((old-dir *downloads-dir*))
    (setf *downloads-dir* dir)
    (unwind-prog1
        (safe-exit old-dir)
      (book-down input)
      (run-line* "for f in *.mp3; do echo \"file '$f'\" >> concat.txt; done")
      (run-line* "ffmpeg -f concat -safe 0 -i concat.txt -c copy output1.mp3")
      (mvbind (times rem) (ceiling (/ (run-line*-integer-output "mp3info -p \"%S\" output1.mp3") *max-seconds*))
	      (dotimes (n times)
	        (let ((duration (if (= times (1+ n))
				    (* (1+ rem) *max-seconds*)
				    *max-seconds*)))
		  (run-line* (format nil "ffmpeg -loop 1 -i ~A -t ~D -c mjpeg temp-~D.mp4"
				     image duration n))
		  (run-line* (format nil "ffmpeg -ss ~D -t ~D -i output1.mp3 -c copy output-~D.mp3"
				     (* n *max-seconds*) duration n))
		  (run-line* (format nil "ffmpeg -i temp-~D.mp4 -i output-~:*~D.mp3 -c copy output-~:*~D.mp4"
				     n))
		  (run-line* (format nil "rm temp-~D.mp4" n))))))))
(defmacro deftypep (name general &key (test 'string-equal))
  "Specific file type check."
  (with-gensyms (x)
    `(defun ,name (path)
       (some #'(lambda (,x) (funcall ,test (pathname-type path) ,x))
             ,general))))
(deftypep image-typep *image-types*)
(deftypep archive-typep *archive-types*)
(deftypep video-typep *video-types*)
(defun convert-all ()
  (dolist (dir (subdirectories *downloads-dir*))
    (let ((contents (directory-files dir)))
      (when (not (some #'video-typep contents))
	(convert :image (select #'image-typep contents)
		 :input (select #'archive-typep contents)
		 :dir dir)))))
