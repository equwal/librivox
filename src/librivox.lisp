(in-package :librivox)
(defvar *recent* #p"recent.csv")
(defvar *downloads-dir* "/run/media/raw-downloads/")
(defun start (&key (forward t))
  "Just start everything: download, convert, upload."
  (dodir (dir *downloads-dir* :dirs t)
    (if forward
        (let ((latest (nthid 0 *recent*)))
          (update *recent*)
          (when (string= latest (nthid 0 *recent*))
            (await-upload)))
        (update *recent*))
    (expand *recent* *downloads-dir*)
    (download *downloads-dir*)
    (let ((contents (directory-files dir)))
      (cond ((not (finished contents))
             (convert :image (select #'image-typep contents)
		      :input (select #'audio-typep contents)
		      :dir dir))))
    (upload)
    (start :forward forward)))
(defun empty-dirp (dir)
  (string= "" (run-line (change-dir dir "ls"))))
(defun download (dir)
  (dodir (d dir :dirs t)
    (when (empty-dirp d)
      (wget  (pathname-name d)))))
(defmacro sleep-repeat (seconds &body code)
  `(progn (sleep ,seconds)
          ,@code))
(defun await-upload (&optional (wait-period 5))
  "If everything is caught up, wait and recheck."
  (labels ((waiter (prev-down)
             (if (string= (progn (csv-specific:update *recent*)
                                 (nthid 0 *recent*))
                          prev-down)
                 (progn (format t
                                "Nothing left to do. Waiting for ~D seconds before rechecking for work."
                                wait-period)
                        (sleep-repeat wait-period
                          (waiter prev-down))))))
    (waiter (nthid 0 *recent*))))
