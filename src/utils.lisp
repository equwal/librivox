(in-package :utils)
(defmacro with-gensyms (symbols &body body)
  "Create gensyms for those symbols."
  `(let (,@(mapcar #'(lambda (sym)
		       `(,sym ',(gensym))) symbols))
     ,@body))
(defmacro doread((var stream) &body body)
  "Read character by character with the speed of line by line reading."
  (with-gensyms (line count len)
    `(do ((,line #1=(read-line ,stream nil nil) #1#))
	 ((null ,line))
       (do* ((,line (concatenate 'string ,line (format nil "~%~%")))
	     (,len (length ,line))
	     (,count 0 (1+ ,count))
	     (,var #2=(elt ,line ,count) #2#))
	    ((= (1- ,len) ,count))
	 ,@body))))
(defmacro once-only ((&rest names) &body body)
  "A macro-writing utility for evaluating code only once."
  (let ((gensyms (loop for n in names collect (gensym))))
    `(let (,@(loop for g in gensyms collect `(,g (gensym))))
       `(let (,,@(loop for g in gensyms for n in names collect ``(,,g ,,n)))
          ,(let (,@(loop for n in names for g in gensyms collect `(,n ,g)))
             ,@body)))))
(defmacro make-reader (name (stream-var dispatch-1 dispatch-2) &body body)
  (with-gensyms (sub-char numarg)
    `(progn (defun ,name (,stream-var ,sub-char ,numarg)
	(declare (ignore ,sub-char ,numarg))
	,@body)
	    (set-dispatch-macro-character ,dispatch-1 ,dispatch-2 #',name))))
(defun push-on (elem array)
  (let ((len (length array)))
    (adjust-array array (1+ len))
    (setf (elt array len) elem)
    array))
(defmacro dolines ((var path) &body body)
  (with-gensyms (s)
    `(with-open-file (,s ,path)
       (do ((,var (read-line ,s nil nil) (read-line ,s nil nil)))
	   ((null ,var))
	 ,@body))))
(defmacro aif ((it conditional) then &optional else)
  `(let ((,it ,conditional))
     (if ,it
	 ,then
	 ,else)))
(defmacro awhen ((it conditional) then)
  `(aif (,it ,conditional) ,then))
(defmacro abbrev (short long)
  `(defmacro ,short (&rest args)
     `(,',long ,@args)))
(abbrev mvbind multiple-value-bind)
(abbrev dbind destructuring-bind)
(defun list-directory (directory)
  (directory (merge-pathnames "*.*" directory)))
