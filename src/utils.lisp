(in-package :utils)
(defmacro with-gensyms (symbols &body body)
  "Create gensyms for those symbols."
  `(let (,@(mapcar #'(lambda (sym)
		       `(,sym ',(gensym))) symbols))
     ,@body))
(defmacro once-only ((&rest names) &body body)
  "A macro-writing utility for evaluating code only once."
  (let ((gensyms (loop for n in names collect (gensym))))
    `(let (,@(loop for g in gensyms collect `(,g (gensym))))
       `(let (,,@(loop for g in gensyms for n in names collect ``(,,g ,,n)))
          ,(let (,@(loop for n in names for g in gensyms collect `(,n ,g)))
             ,@body)))))
(defmacro dolines ((var path) &body body)
  (with-gensyms (s)
    `(with-open-file (,s ,path)
       (do ((,var (read-line ,s nil nil) (read-line ,s nil nil)))
	   ((null ,var))
	 ,@body))))
(defmacro aif ((it conditional) then &optional else)
  `(let ((,it ,conditional))
     (if ,it
	 ,then
	 ,else)))
(defmacro awhen ((it conditional) then)
  `(aif (,it ,conditional) ,then))
(defmacro abbrev (short long)
  `(defmacro ,short (&rest args)
     `(,',long ,@args)))
(abbrev mvbind multiple-value-bind)
(abbrev dbind destructuring-bind)
(defun list-directory (directory)
  (directory (merge-pathnames "*.*" directory)))
