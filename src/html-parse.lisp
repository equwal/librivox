(in-package :html-parser)
;;; Specification:
;;; (("xml")("html" ("body" ("p" nil)))
;;; (ie. each one is a regex.
(defun rate (specification tree)
  (declare (ignore specification tree)))
(defun tag-of (html-string)
  (mvbind (success? tag-array)
	  (scan-to-strings"<(.*?\\w*).*?>" html-string)
	  (when success? (aref tag-array 0))))
(defun content-of (tag-name html-string &key inside after)
  (mvbind (output parens)
      ;; If things are slow, it is this runtime regex expansion
	  (scan-to-strings (format nil "<~A\\w*.*?>(.*?)</~:*~A>(.*)" tag-name) html-string)
	  (declare (ignore output))
	  (let ((inside-val (aref parens 0))
		(after-val (aref parens 1)))
	    (cond ((and (not inside) after) after)
		  ((and inside       (not after))  inside)
		  (t (values inside-val after-val))))))
(defun push-tree (node tree)
  (if node (cons node tree) tree))
(defun push-node (atom node)
  (if node
      (cons node atom)
      atom))
(defun adjoin-trees (tree1 tree2)
  (append tree1 tree2))
(declaim (inline get-node))
(defun get-node (key node)
  (assoc key node))
(defun html->lispy (html-string &optional node)
  (if (string= "" html-string)
      node
      (let ((tag-of (tag-of html-string)))
	(if tag-of
	    (mvbind (inside after) (content-of tag-of html-string)
		    (push-tree (push-node (html->lispy inside tag-of) node)
			       (html->lispy after)))
	    (push-node html-string node)))))
