(defpackage :csv
  (:use :cl :utils)
  (:import-from :utils :push-on :with-gensyms :make)
  (:export :read-csv))
(in-package :csv)
(defun toggle (val)
  (setf val (not val)))
(make ((line "") (pos 0)) read-char-fast (stream)
      (if (string= "" line)
	  (let ((next (read-line stream nil nil)))
	    (when next (setf line next pos 0) #\Newline))
	  (elt line (incf pos))))
(defvar *in* nil)
(defun switches (prev curr str)
  (format t "~A ~A ~A~%" *in* prev curr)
  (let ((res (if (null curr)
		 (setf *in* nil)
		 (if *in*
		     (if (char= #\" prev curr)
			 #\"
			 (if #1=(char= #\" prev)
			     (progn (setf *in* nil) #\Nul)
			     prev))
		     (if #1#
			 (setf *in* t))))))
    (if (characterp res)
	(push-on res str)
	str)))
(defun splice (str)
  (when (not (string= "" str))
    (let ((res (search (string #\Nul) str)))
      (cons (subseq str 0 res) (splice (subseq str (1+ res)))))))
(defmacro make-reader (name (stream-var dispatch-1 dispatch-2) &body body)
  (with-gensyms (sub-char numarg)
    `(progn (defun ,name (,stream-var ,sub-char ,numarg)
	(declare (ignore ,sub-char ,numarg))
	,@body)
	    (set-dispatch-macro-character ,dispatch-1 ,dispatch-2 #',name))))
(make-reader my-csv (stream #\# #\,)
  (do ((prev #1= (read-char stream nil nil) curr)
       (curr #1# #1#)
       (str (make-array 0 :adjustable t :element-type 'character)
	    (switches prev curr str)))
      ((and (char= curr #\#) (char= prev #\,)) (splice (switches nil nil str)))))
;;; '#, "hi there","man!",#
(make-reader my-string (stream #\# #\>)
  (do* ((prev #1=(read-char stream nil nil) curr)
	(first prev)
	(curr #1# #1#)
	(str (make-array 0 :adjustable t :element-type 'character)
	     (push-on prev str)))
       ((char= curr first) str)))

;; (make-reader csv (stream #\#)
;;   (do ((prev #1=(read-char-fast stream) curr)
;;        (curr #1# #1#))
;;       ((not curr))))
;; (defun read-csv (path)
;;   (with-open-file (stream path)
;;     (mapcar #'(lambda (x) (subseq x 1)) (read-string stream))))
