(defpackage :csv
  (:use :cl :utils)
  (:import-from :utils :with-gensyms))
(defun toggle (thing)
  (setf thing (not thing)))
(defmacro make (external-var-pairs name args &body body)
  `(let ,external-var-pairs
     (setf (symbol-function ',name) #'(lambda ,args ,@body))))
(defun push-on (elem array)
  (let ((len (length array)))
    (adjust-array array (1+ len))
    (setf (elt array len) elem)
    array))
(let ((in nil)
      (str (make-array 0 :adjustable t :element-type 'character))
      (prev #\Nul))
  (make () reset () (setf in nil) (setf prev #\Nul))
  (make () close? (char) (and in (char= #\" char) (char/= #\Stx prev)))
  (make () open! () (setf in t prev #\Stx))
  (make () close! () (push-on #\Nul str) (setf in nil))
  (make () open? (char) (and (not in) (char= #\" char)))
  (make () wait? (char) (and (not in) (char= #\, char)))
  (make () push! (char) (when (not (and (char= #\" char) (char= #\" prev))) (push-on char str)) (setf prev char))
  (make () str () (prog1 str (setf in nil str (make-array 0 :adjustable t :element-type 'character) prev #\Nul))))
(defun read-csv-old (path)
  (doread (char path)
    (cond ((close? char) (close!))
	  ((wait? char) nil)
	  ((open? char) (open!))
	  (t (push! char))))
 (str))
